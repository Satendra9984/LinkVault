plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    // id 'com.google.gms.google-services'  
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


android {
    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.vicharshala.link_vault"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    flavorDimensions "env"
    productFlavors {
        production {
            dimension "env"
            // applicationIdSuffix ".prod"
            // versionNameSuffix "-prod"
            buildConfigField "String", "FLAVOR", "\"prod\""
        }
        development {
            dimension "env"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            buildConfigField "String", "FLAVOR", "\"dev\""
            resValue "string", "app_name", "Link Vault (Dev)"
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {

        release {
        shrinkResources true
        minifyEnabled true
        signingConfig signingConfigs.release
    }        
        debug {
        signingConfig signingConfigs.debug
        shrinkResources false
        minifyEnabled false
    }
}

}

flutter {
    source '../..'
}


android.applicationVariants.all { variant ->

    def flavorName = variant.productFlavors.isEmpty() ? null : variant.productFlavors.get(0).name
    def googleServicesFile = flavorName == "development"
        ? file("src/development/google-services.json")
        : file("src/production/google-services.json")

    if (googleServicesFile.exists()) {
        println "Applying google-services.json for $flavorName"
        if (!project.plugins.hasPlugin('com.google.gms.google-services')) {
            apply plugin: 'com.google.gms.google-services'
        }
    } else {
        println "Warning: google-services.json not found for $flavorName"
        // Optionally, you can throw an exception here if you want to enforce the file's presence
        // throw new FileNotFoundException("google-services.json not found for $flavorName")
    }
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation("com.google.ads.mediation:vungle:7.4.0.1")
}
