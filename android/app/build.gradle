plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    // id 'com.google.gms.google-services'  
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}



android {
    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.vicharshala.link_vault"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    flavorDimensions "env"
    productFlavors {
        production {
            dimension "env"
            // applicationIdSuffix ".prod"
            // versionNameSuffix "-prod"
        }
        dev {
            dimension "env"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
        }
    }
    
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

}

flutter {
    source '../..'
}


// Add this at the end of the file
// android.applicationVariants.all { variant ->
//     def googleServicesFile = variant.productFlavors.contains('dev') 
//         ? file("src/dev/google-services.json") 
//         : file("google-services.json")

//     if (googleServicesFile.exists()) {
//         apply plugin: 'com.google.gms.google-services'
//     }
// }

android.applicationVariants.all { variant ->
    def googleServicesFile = variant.productFlavors.get(0).name == "dev"
        ? file("src/dev/google-services.json") 
        : file("google-services.json")

    if (googleServicesFile.exists()) {
        println "Applying google-services.json for ${variant.productFlavors.get(0).name}"
        apply plugin: 'com.google.gms.google-services'
    } else {
        throw new FileNotFoundException("google-services.json not found for ${variant.productFlavors.get(0).name}")
    }
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation("com.google.ads.mediation:facebook:6.17.0.0")
    implementation("com.google.ads.mediation:vungle:7.4.0.1")
}

