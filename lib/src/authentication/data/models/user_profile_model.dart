// lib/data/models/user_profile_model.dart
import 'dart:convert';

import 'package:isar/isar.dart';
import '../../domain/entities/user_profile.dart';

part 'user_profile_model.g.dart'; // Generated by Isar

@collection
class UserProfileModel {
  Id isarId = Isar.autoIncrement;

  @Index(unique: true, replace: true)
  final String id;

  final String? displayName;
  final String? profilePictureUrl;
  final String? bio;
  final int usageCredits;
  final bool isPremium;
  final DateTime premiumExpiresAt;
  final DateTime createdAt;
  final DateTime updatedAt;
  final DateTime lastActiveAt;

  @ignore
  final Map<String, dynamic> settings;

  @Name('settings_json')
  final String _settingsJson;

  UserProfileModel({
    required this.id,
    required this.premiumExpiresAt,
    this.displayName,
    this.profilePictureUrl,
    this.bio,
    this.usageCredits = 0,
    this.isPremium = false,
    required this.createdAt,
    required this.updatedAt,
    required this.lastActiveAt,
    this.settings = const {},
  }) : _settingsJson = jsonEncode(settings);



  // Convert from domain entity to data model
  factory UserProfileModel.fromEntity(UserProfile profile) {
    return UserProfileModel(
      id: profile.id,
      displayName: profile.displayName,
      profilePictureUrl: profile.profilePictureUrl,
      bio: profile.bio,
      usageCredits: profile.usageCredits,
      isPremium: profile.isPremium,
      premiumExpiresAt: profile.premiumExpiresAt,
      createdAt: profile.createdAt,
      updatedAt: profile.updatedAt,
      lastActiveAt: profile.lastActiveAt,
      settings: profile.settings,
    );
  }

  // Convert from data model to domain entity
  UserProfile toEntity() {
    return UserProfile(
      id: id,
      displayName: displayName,
      profilePictureUrl: profilePictureUrl,
      bio: bio,
      usageCredits: usageCredits,
      isPremium: isPremium,
      premiumExpiresAt: premiumExpiresAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      lastActiveAt: lastActiveAt,
      settings: _parseSettings(),
    );
  }
  // Parse settings from JSON string
  Map<String, dynamic> _parseSettings() {
    try {
      return _settingsJson.isNotEmpty 
          ? jsonDecode(_settingsJson) as Map<String, dynamic> 
          : {};
    } catch (e) {
      return {};
    }
  }
  // Convert from Supabase JSON to data model
  factory UserProfileModel.fromSupabase(Map<String, dynamic> json) {
    return UserProfileModel(
      id: json['id'] as String,
      displayName: json['display_name'] as String?,
      profilePictureUrl: json['profile_picture_url'] as String?,
      bio: json['bio'] as String?,
      usageCredits: json['usage_credits'] as int,
      isPremium: json['premium_status'] as bool,
      premiumExpiresAt: DateTime.parse(json['premium_expires_at'] as String),
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
      lastActiveAt: DateTime.parse(json['last_active_at'] as String),
      settings: json['settings'] as Map<String, dynamic>,
    );
  }

  // Convert to Supabase JSON
  Map<String, dynamic> toSupabase() {
    return {
      'id': id,
      'display_name': displayName,
      'profile_picture_url': profilePictureUrl,
      'bio': bio,
      'usage_credits': usageCredits,
      'premium_status': isPremium,
      'premium_expires_at': premiumExpiresAt?.toIso8601String(),
      'updated_at': DateTime.now().toIso8601String(),
      'last_active_at': DateTime.now().toIso8601String(),
      'settings': settings,
    };
  }
}
